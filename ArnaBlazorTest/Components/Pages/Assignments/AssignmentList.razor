@page "/assignments"
@using ArnaBlazorTest.Models
@using ArnaBlazorTest.Services
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize]
@inject IAssignmentService AssignmentService
@inject IProgressService ProgressService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Assignments</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>My Assignments</h2>
        <a href="/" class="btn btn-outline-secondary">Back to Home</a>
    </div>

    @if (isLoading)
    {
        <div class="text-center mt-4">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (error != null)
    {
        <div class="alert alert-danger" role="alert">
            @error
        </div>
    }
    else if (!assignments.Any())
    {
        <div class="alert alert-info" role="alert">
            <h5>No assignments available</h5>
            <p>There are currently no assignments assigned to you. Please check back later or contact your instructor.</p>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-8">
                @foreach (var assignment in assignments)
                {
                    var status = GetAssignmentStatus(assignment.Id);
                    <AssignmentCard Assignment="@assignment" Status="@status" />
                }
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Progress Summary</h5>
                        <div class="mt-3">
                            <p>Completed: @completedCount / @assignments.Count</p>
                            <div class="progress mb-3">
                                <div class="progress-bar" role="progressbar" 
                                     style="width: @(completedCount * 100 / Math.Max(1, assignments.Count))%">
                                </div>
                            </div>
                        </div>
                        @if (averageScore > 0)
                        {
                            <div class="mt-3">
                                <p>Average Score: @averageScore.ToString("F1")%</p>
                            </div>
                        }
                        <div class="mt-3">
                            <p class="text-muted small">Click on any assignment to start or review your progress.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Assignment> assignments = new();
    private Dictionary<int, string> assignmentStatuses = new();
    private bool isLoading = true;
    private string? error;
    private int completedCount = 0;
    private double averageScore = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            // Debug: Log all claims
            Console.WriteLine($"User authenticated: {user.Identity?.IsAuthenticated}");
            foreach (var claim in user.Claims)
            {
                Console.WriteLine($"Claim: {claim.Type} = {claim.Value}");
            }
            
            var userId = int.Parse(user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "0");
            Console.WriteLine($"Retrieved user ID: {userId}");

            if (userId == 0)
            {
                error = "User not authenticated properly.";
                return;
            }

            assignments = await AssignmentService.GetAllAssignmentsAsync();
            var progresses = await ProgressService.GetUserAssignmentProgressesAsync(userId);

            Console.WriteLine($"Retrieved {progresses.Count} progress records for user {userId}");
            foreach (var progress in progresses)
            {
                Console.WriteLine($"Progress: AssignmentId={progress.AssignmentId}, Status={progress.Status}, Score={progress.Score}");
                assignmentStatuses[progress.AssignmentId] = progress.Status;
            }

            completedCount = progresses.Count(p => p.Status == "completed");
            Console.WriteLine($"Completed count: {completedCount}");
            if (completedCount > 0)
            {
                averageScore = progresses
                    .Where(p => p.Status == "completed")
                    .Average(p => p.Score);
                Console.WriteLine($"Average score: {averageScore}");
            }
        }
        catch (Exception ex)
        {
            error = "Failed to load assignments. Please try again later.";
            Console.WriteLine($"Error loading assignments: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetAssignmentStatus(int assignmentId)
    {
        return assignmentStatuses.TryGetValue(assignmentId, out var status) ? status : "Pending";
    }
} 