@page "/register"
@using ArnaBlazorTest.Services
@using System.ComponentModel.DataAnnotations
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<h3>Register</h3>

<EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">@successMessage</div>
    }

    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText id="username" class="form-control" @bind-Value="registerModel.Username" />
        <ValidationMessage For="@(() => registerModel.Username)" />
    </div>
    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
        <ValidationMessage For="@(() => registerModel.Email)" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
        <ValidationMessage For="@(() => registerModel.Password)" />
    </div>
    <div class="mb-3">
        <label for="role" class="form-label">Role</label>
        <InputSelect id="role" class="form-select" @bind-Value="registerModel.RoleId">
            <option value="1">Learner</option>
            <option value="2">Manager</option>
        </InputSelect>
        <ValidationMessage For="@(() => registerModel.RoleId)" />
    </div>
    <button type="submit" class="btn btn-primary" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="ms-2">Registering...</span>
        }
        else
        {
            <span>Register</span>
        }
    </button>
    <button type="button" class="btn btn-link" @onclick="GoToLogin">Already have an account? Login</button>
</EditForm>

@code {
    private RegisterModel registerModel = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleRegister()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;
            var result = await AuthService.RegisterAsync(
                registerModel.Username,
                registerModel.Password,
                registerModel.Email,
                registerModel.RoleId,
                null // managerId
            );
            if (result.success)
            {
                successMessage = "Registration successful! Redirecting to login...";
                await Task.Delay(1500);
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                errorMessage = result.message;
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred during registration. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GoToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private class RegisterModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;
        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = string.Empty;
        [Required]
        public int RoleId { get; set; } = 1;
    }
} 