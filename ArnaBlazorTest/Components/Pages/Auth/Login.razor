@page "/login"
@using ArnaBlazorTest.Services
@using System.ComponentModel.DataAnnotations
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-5">
                <div class="card-header">
                    <h3 class="text-center">Login</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }

                        <div class="form-group mb-3">
                            <label for="username">Username</label>
                            <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
                            <ValidationMessage For="@(() => loginModel.Username)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="password">Password</label>
                            <InputText type="password" id="password" class="form-control" @bind-Value="loginModel.Password" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="ms-2">Loading...</span>
                            }
                            else
                            {
                                <span>Login</span>
                            }
                        </button>
                    </EditForm>
                    <button type="button" class="btn btn-link" @onclick="GoToRegister">Don't have an account? Register</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }

    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            var result = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);

            if (result.success && result.token != null)
            {
                await ((CustomAuthStateProvider)AuthStateProvider).UpdateAuthenticationState(result.token);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = result.message;
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred during login. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GoToRegister()
    {
        NavigationManager.NavigateTo("/register");
    }
} 